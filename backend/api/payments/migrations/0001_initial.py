# Generated by Django 5.2.5 on 2025-08-20 13:08

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(help_text='Unique payment identifier', max_length=100, unique=True)),
                ('payment_method', models.CharField(choices=[('cod', 'Cash on Delivery'), ('gcash', 'GCash'), ('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer'), ('paymaya', 'PayMaya'), ('grabpay', 'GrabPay'), ('paypal', 'PayPal')], help_text='Payment method used', max_length=50)),
                ('payment_type', models.CharField(choices=[('order_payment', 'Order Payment'), ('delivery_fee', 'Delivery Fee'), ('service_fee', 'Service Fee'), ('refund', 'Refund'), ('top_up', 'Wallet Top-up')], default='order_payment', help_text='Type of payment', max_length=50)),
                ('amount_paid', models.DecimalField(decimal_places=2, help_text='Actual amount paid', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='PHP', help_text='Payment currency (ISO 4217)', max_length=3)),
                ('transaction_id', models.CharField(blank=True, help_text='External payment transaction ID', max_length=255, null=True)),
                ('gateway_reference', models.CharField(blank=True, help_text='Payment gateway reference number', max_length=255, null=True)),
                ('image_proof', models.URLField(blank=True, help_text='Payment proof image path', max_length=255, null=True)),
                ('receipt_number', models.CharField(blank=True, help_text='Payment receipt number', max_length=100, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('cancelled', 'Cancelled')], default='pending', help_text='Payment status', max_length=50)),
                ('status_notes', models.TextField(blank=True, help_text='Notes about payment status', null=True)),
                ('initiated_at', models.DateTimeField(auto_now_add=True, help_text='When payment was initiated')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When payment was processed', null=True)),
                ('paid_at', models.DateTimeField(blank=True, help_text='Payment completion timestamp', null=True)),
                ('failed_at', models.DateTimeField(blank=True, help_text='When payment failed', null=True)),
                ('refunded_at', models.DateTimeField(blank=True, help_text='When payment was refunded', null=True)),
                ('customer_notes', models.TextField(blank=True, help_text='Customer notes about payment', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes about payment', null=True)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Payment processing fee', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('gateway_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Payment gateway fee', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(help_text='Associated order', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='orders.order')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payment',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['order'], name='idx_payment_order'), models.Index(fields=['payment_status'], name='idx_payment_status'), models.Index(fields=['payment_method'], name='idx_payment_method'), models.Index(fields=['payment_id'], name='idx_payment_id'), models.Index(fields=['transaction_id'], name='idx_payment_transaction')],
                'constraints': [models.CheckConstraint(condition=models.Q(('amount_paid__gte', 0)), name='valid_payment_amount'), models.CheckConstraint(condition=models.Q(('processing_fee__gte', 0)), name='valid_payment_processing_fee'), models.CheckConstraint(condition=models.Q(('gateway_fee__gte', 0)), name='valid_payment_gateway_fee')],
            },
        ),
    ]
