# Generated by Django 5.2.5 on 2025-08-17 14:17

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MedicineCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., "Pain Relief", "Antibiotics")', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier for UI display', max_length=100, null=True)),
                ('color', models.CharField(blank=True, help_text='Hex color code for UI display', max_length=7, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Category availability')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_category', models.ForeignKey(blank=True, help_text='Parent category for subcategories', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='inventory.medicinecategory')),
            ],
            options={
                'verbose_name': 'Medicine Category',
                'verbose_name_plural': 'Medicine Categories',
                'db_table': 'medicine_category',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MedicineCatalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Medicine name (e.g., "Paracetamol")', max_length=255)),
                ('generic_name', models.CharField(blank=True, help_text='Generic/chemical name', max_length=255, null=True)),
                ('brand_names', models.JSONField(blank=True, help_text='Common brand names for this medicine', null=True)),
                ('form', models.CharField(choices=[('tablet', 'Tablet'), ('syrup', 'Syrup'), ('cream', 'Cream'), ('injection', 'Injection'), ('capsule', 'Capsule'), ('drops', 'Drops'), ('inhaler', 'Inhaler'), ('ointment', 'Ointment'), ('gel', 'Gel'), ('patch', 'Patch'), ('suspension', 'Suspension'), ('solution', 'Solution')], help_text='Medicine form', max_length=100)),
                ('dosage', models.CharField(help_text='Dosage strength (e.g., "500mg")', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Medicine description and usage', null=True)),
                ('active_ingredients', models.JSONField(blank=True, help_text='List of active ingredients', null=True)),
                ('prescription_required', models.BooleanField(default=False, help_text='Whether prescription is required')),
                ('controlled_substance', models.BooleanField(default=False, help_text='Whether this is a controlled substance')),
                ('therapeutic_class', models.CharField(blank=True, help_text='Therapeutic class of the medicine', max_length=255, null=True)),
                ('side_effects', models.JSONField(blank=True, help_text='Common side effects', null=True)),
                ('contraindications', models.JSONField(blank=True, help_text='Contraindications and warnings', null=True)),
                ('interactions', models.JSONField(blank=True, help_text='Drug interactions', null=True)),
                ('storage_conditions', models.CharField(blank=True, help_text='Storage conditions (e.g., "Store in a cool, dry place")', max_length=255, null=True)),
                ('shelf_life', models.CharField(blank=True, help_text='Shelf life information', max_length=100, null=True)),
                ('image', models.URLField(blank=True, help_text='Default medicine image URL', max_length=255, null=True)),
                ('images', models.JSONField(blank=True, help_text='Additional medicine images', null=True)),
                ('fda_approval', models.BooleanField(default=True, help_text='Whether FDA approved')),
                ('fda_number', models.CharField(blank=True, help_text='FDA registration number', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Medicine availability in catalog')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this medicine')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Medicine category', on_delete=django.db.models.deletion.CASCADE, related_name='medicines', to='inventory.medicinecategory')),
            ],
            options={
                'verbose_name': 'Medicine Catalog',
                'verbose_name_plural': 'Medicine Catalog',
                'db_table': 'medicine_catalog',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PharmacyInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Medicine name (inherited from catalog or custom)', max_length=255)),
                ('form', models.CharField(choices=[('tablet', 'Tablet'), ('syrup', 'Syrup'), ('cream', 'Cream'), ('injection', 'Injection'), ('capsule', 'Capsule'), ('drops', 'Drops'), ('inhaler', 'Inhaler'), ('ointment', 'Ointment'), ('gel', 'Gel'), ('patch', 'Patch'), ('suspension', 'Suspension'), ('solution', 'Solution')], help_text='Medicine form', max_length=100)),
                ('dosage', models.CharField(help_text='Dosage strength', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Medicine description', null=True)),
                ('prescription_required', models.BooleanField(default=False, help_text='Whether prescription is required')),
                ('custom_name', models.CharField(blank=True, help_text='Custom name if different from catalog', max_length=255, null=True)),
                ('custom_description', models.TextField(blank=True, help_text='Custom description if different from catalog', null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Selling price', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price before discount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price for profit calculation', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Available stock quantity')),
                ('min_stock_level', models.PositiveIntegerField(default=10, help_text='Minimum stock level for reorder alerts')),
                ('max_stock_level', models.PositiveIntegerField(default=1000, help_text='Maximum stock level')),
                ('is_available', models.BooleanField(default=True, help_text='Product availability status')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this product')),
                ('is_on_sale', models.BooleanField(default=False, help_text='Whether product is on sale')),
                ('sale_start_date', models.DateTimeField(blank=True, help_text='Sale start date', null=True)),
                ('sale_end_date', models.DateTimeField(blank=True, help_text='Sale end date', null=True)),
                ('discount_percentage', models.PositiveIntegerField(blank=True, help_text='Discount percentage (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('image', models.URLField(blank=True, help_text='Product image URL', max_length=255, null=True)),
                ('images', models.JSONField(blank=True, help_text='Additional product images', null=True)),
                ('manufacturer', models.CharField(blank=True, help_text='Medicine manufacturer', max_length=255, null=True)),
                ('batch_number', models.CharField(blank=True, help_text='Batch/lot number', max_length=100, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date', null=True)),
                ('tags', models.JSONField(blank=True, help_text='Product tags for search and categorization', null=True)),
                ('notes', models.TextField(blank=True, help_text='Pharmacy-specific notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Medicine category', on_delete=django.db.models.deletion.CASCADE, related_name='pharmacy_inventories', to='inventory.medicinecategory')),
                ('medicine', models.ForeignKey(blank=True, help_text='Reference to MedicineCatalog (NULL for custom products)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pharmacy_inventories', to='inventory.medicinecatalog')),
            ],
            options={
                'verbose_name': 'Pharmacy Inventory',
                'verbose_name_plural': 'Pharmacy Inventory',
                'db_table': 'pharmacy_inventory',
                'ordering': ['-created_at'],
            },
        ),
    ]
