# Generated by Django 5.2.5 on 2025-08-20 13:08

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ValidID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('philsys_id', 'PhilSys ID (PhilID/ePhilID)'), ('passport', 'Passport'), ('drivers_license', "Driver's License"), ('umid', 'UMID (Unified Multi-Purpose ID)'), ('prc_id', 'PRC ID (Professional Regulation Commission)'), ('postal_id', 'Postal ID'), ('voters_id', "Voter's ID"), ('sss_id', 'SSS ID'), ('philhealth_id', 'PhilHealth ID'), ('gsis_id', 'GSIS ID'), ('senior_citizen_id', 'Senior Citizen ID'), ('nbi_clearance', 'NBI Clearance'), ('police_clearance', 'Police Clearance'), ('school_id', 'School ID'), ('barangay_id', 'Barangay ID/Certification'), ('tin_id', 'TIN ID'), ('pwd_id', 'PWD ID'), ('owwa_id', 'OWWA ID'), ('seafarer_id', "Seafarer's Book/ID"), ('company_id', 'Company ID')], help_text='Type of valid ID.', max_length=100, unique=True)),
                ('category', models.CharField(choices=[('primary', 'Primary ID'), ('secondary', 'Secondary ID')], help_text='Category of the ID (Primary or Secondary).', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the ID type.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this ID type is currently accepted.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Valid ID Type',
                'verbose_name_plural': 'Valid ID Types',
                'db_table': 'valid_id_types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, help_text='Optional username. Users can login with email or phone.', max_length=150, null=True, unique=True)),
                ('email', models.EmailField(blank=True, help_text='Email address for authentication and notifications.', max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for authentication and SMS notifications.', max_length=20, null=True, unique=True)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('pharmacy', 'Pharmacy'), ('rider', 'Rider'), ('admin', 'Admin')], default='customer', help_text='User role in the system.', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('active', 'Active'), ('suspended', 'Suspended'), ('banned', 'Banned')], default='pending', help_text='User account status.', max_length=20)),
                ('is_email_verified', models.BooleanField(default=False, help_text='Whether email has been verified.')),
                ('is_phone_verified', models.BooleanField(default=False, help_text='Whether phone number has been verified.')),
                ('email_verification_token', models.CharField(blank=True, help_text='Token for email verification.', max_length=100, null=True)),
                ('phone_verification_code', models.CharField(blank=True, help_text='SMS verification code.', max_length=6, null=True)),
                ('phone_verification_expires', models.DateTimeField(blank=True, help_text='Expiration time for phone verification code.', null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of failed login attempts.')),
                ('last_failed_login', models.DateTimeField(blank=True, help_text='Timestamp of last failed login attempt.', null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account locked until this timestamp.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Customer's first name.", max_length=100)),
                ('last_name', models.CharField(help_text="Customer's last name.", max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text="Customer's middle name.", max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text="Customer's date of birth.", null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], default='male', help_text="Customer's gender.", max_length=10)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact person name.', max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number.', max_length=20, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact.', max_length=50, null=True)),
                ('is_senior_citizen', models.BooleanField(default=False, help_text='Whether customer is a senior citizen (60+ years old).')),
                ('senior_citizen_id_number', models.CharField(blank=True, help_text='Senior citizen ID number.', max_length=100, null=True)),
                ('senior_citizen_id_issued_by', models.CharField(blank=True, help_text='Issuing authority for senior citizen ID.', max_length=100, null=True)),
                ('senior_citizen_id_issue_date', models.DateField(blank=True, help_text='Date when senior citizen ID was issued.', null=True)),
                ('profile_picture', models.URLField(blank=True, help_text='AWS S3 URL for profile picture.', max_length=500, null=True)),
                ('primary_id_uploaded', models.BooleanField(default=False, help_text='Whether primary valid ID has been uploaded.')),
                ('secondary_ids_uploaded', models.PositiveIntegerField(default=0, help_text='Number of secondary valid IDs uploaded.')),
                ('is_identity_verified', models.BooleanField(default=False, help_text='Whether customer identity has been verified.')),
                ('preferred_payment_method', models.CharField(choices=[('cod', 'Cash on Delivery'), ('gcash', 'GCash'), ('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer')], default='cod', help_text='Preferred payment method.', max_length=20)),
                ('marketing_consent', models.BooleanField(default=False, help_text='Whether customer consents to marketing communications.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account.', on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Pharmacy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pharmacy_name', models.CharField(help_text='Official business name of the pharmacy.', max_length=255)),
                ('business_permit_number', models.CharField(help_text='Business permit number.', max_length=100, unique=True)),
                ('business_permit_expiry', models.DateField(help_text='Expiry date of business permit.')),
                ('pharmacy_license_number', models.CharField(help_text='Pharmacy license number.', max_length=100, unique=True)),
                ('pharmacy_license_expiry', models.DateField(help_text='Expiry date of pharmacy license.')),
                ('owner_first_name', models.CharField(help_text="Pharmacy owner's first name.", max_length=100)),
                ('owner_last_name', models.CharField(help_text="Pharmacy owner's last name.", max_length=100)),
                ('owner_middle_name', models.CharField(blank=True, help_text="Pharmacy owner's middle name.", max_length=100, null=True)),
                ('owner_date_of_birth', models.DateField(help_text="Pharmacy owner's date of birth.")),
                ('owner_gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text="Pharmacy owner's gender.", max_length=10)),
                ('business_phone', models.CharField(help_text='Business phone number.', max_length=20)),
                ('business_email', models.EmailField(help_text='Business email address.', max_length=254)),
                ('street_address', models.CharField(help_text='Street address of the pharmacy.', max_length=255)),
                ('barangay', models.CharField(help_text='Barangay where pharmacy is located.', max_length=100)),
                ('city', models.CharField(default='Iligan City', help_text='City where pharmacy is located.', max_length=50)),
                ('province', models.CharField(default='Lanao del Norte', help_text='Province where pharmacy is located.', max_length=50)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code.', max_length=10, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='GPS latitude coordinate.', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='GPS longitude coordinate.', max_digits=11, null=True)),
                ('operating_hours', models.JSONField(default=dict, help_text='Operating hours for each day of the week.')),
                ('services_offered', models.JSONField(default=list, help_text='List of services offered (delivery, consultation, etc.).')),
                ('payment_methods_accepted', models.JSONField(default=list, help_text='Payment methods accepted by the pharmacy.')),
                ('owner_primary_id_uploaded', models.BooleanField(default=False, help_text="Whether owner's primary valid ID has been uploaded.")),
                ('business_permit_uploaded', models.BooleanField(default=False, help_text='Whether business permit has been uploaded.')),
                ('pharmacy_license_uploaded', models.BooleanField(default=False, help_text='Whether pharmacy license has been uploaded.')),
                ('storefront_image_uploaded', models.BooleanField(default=False, help_text='Whether storefront image has been uploaded.')),
                ('is_fully_verified', models.BooleanField(default=False, help_text='Whether pharmacy has completed all verification requirements.')),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended'), ('closed', 'Closed')], default='pending', help_text='Pharmacy verification status.', max_length=20)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes for approval/rejection.', null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the pharmacy was verified.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account.', on_delete=django.db.models.deletion.CASCADE, related_name='pharmacy_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this pharmacy.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_pharmacies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pharmacy',
                'verbose_name_plural': 'Pharmacies',
                'db_table': 'pharmacies',
            },
        ),
        migrations.CreateModel(
            name='Rider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Rider's first name.", max_length=100)),
                ('last_name', models.CharField(help_text="Rider's last name.", max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text="Rider's middle name.", max_length=100, null=True)),
                ('date_of_birth', models.DateField(help_text="Rider's date of birth.")),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text="Rider's gender.", max_length=10)),
                ('vehicle_type', models.CharField(choices=[('motorcycle', 'Motorcycle'), ('bicycle', 'Bicycle'), ('car', 'Car'), ('scooter', 'Scooter'), ('other', 'Other')], help_text='Type of vehicle used for delivery.', max_length=20)),
                ('vehicle_brand', models.CharField(blank=True, help_text='Brand of the vehicle.', max_length=100, null=True)),
                ('vehicle_model', models.CharField(blank=True, help_text='Model of the vehicle.', max_length=100, null=True)),
                ('plate_number', models.CharField(blank=True, help_text='Vehicle plate number (if applicable).', max_length=20, null=True)),
                ('vehicle_color', models.CharField(blank=True, help_text='Color of the vehicle.', max_length=50, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact person name.', max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number.', max_length=20, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact.', max_length=50, null=True)),
                ('profile_picture', models.URLField(blank=True, help_text='AWS S3 URL for profile picture.', max_length=500, null=True)),
                ('primary_id_uploaded', models.BooleanField(default=False, help_text='Whether primary valid ID has been uploaded.')),
                ('drivers_license_uploaded', models.BooleanField(default=False, help_text="Whether driver's license has been uploaded (for motorized vehicles).")),
                ('psa_birth_certificate_uploaded', models.BooleanField(default=False, help_text='Whether PSA birth certificate has been uploaded.')),
                ('is_fully_verified', models.BooleanField(default=False, help_text='Whether rider has completed all verification requirements.')),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='pending', help_text='Rider verification status.', max_length=20)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes for approval/rejection.', null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the rider was verified.', null=True)),
                ('total_deliveries', models.PositiveIntegerField(default=0, help_text='Total number of successful deliveries.')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average customer rating (0.00 to 5.00).', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings from deliveries.', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account.', on_delete=django.db.models.deletion.CASCADE, related_name='rider_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this rider.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_riders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rider',
                'verbose_name_plural': 'Riders',
                'db_table': 'riders',
            },
        ),
        migrations.CreateModel(
            name='UserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_file', models.FileField(help_text='Uploaded document file.', upload_to='user_documents/%Y/%m/%d/')),
                ('document_number', models.CharField(blank=True, help_text='ID number on the document.', max_length=100, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date of the document.', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', help_text='Verification status of the document.', max_length=20)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes for approval/rejection.', null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the document was verified.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who uploaded this document.', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this document.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL)),
                ('id_type', models.ForeignKey(help_text='Type of ID document.', on_delete=django.db.models.deletion.CASCADE, to='users.validid')),
            ],
            options={
                'verbose_name': 'User Document',
                'verbose_name_plural': 'User Documents',
                'db_table': 'user_documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='idx_user_email'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='idx_user_phone'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='idx_user_role'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['status'], name='idx_user_status'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='idx_user_created'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('email__isnull', False), ('phone_number__isnull', False), _connector='OR'), name='user_must_have_email_or_phone'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['user'], name='idx_customer_user'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_senior_citizen'], name='idx_customer_senior'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_identity_verified'], name='idx_customer_verified'),
        ),
        migrations.AddIndex(
            model_name='pharmacy',
            index=models.Index(fields=['user'], name='idx_pharmacy_user'),
        ),
        migrations.AddIndex(
            model_name='pharmacy',
            index=models.Index(fields=['status'], name='idx_pharmacy_status'),
        ),
        migrations.AddIndex(
            model_name='pharmacy',
            index=models.Index(fields=['city'], name='idx_pharmacy_city'),
        ),
        migrations.AddIndex(
            model_name='pharmacy',
            index=models.Index(fields=['latitude', 'longitude'], name='idx_pharmacy_location'),
        ),
        migrations.AddIndex(
            model_name='rider',
            index=models.Index(fields=['user'], name='idx_rider_user'),
        ),
        migrations.AddIndex(
            model_name='rider',
            index=models.Index(fields=['status'], name='idx_rider_status'),
        ),
        migrations.AddIndex(
            model_name='rider',
            index=models.Index(fields=['vehicle_type'], name='idx_rider_vehicle'),
        ),
        migrations.AddIndex(
            model_name='rider',
            index=models.Index(fields=['average_rating'], name='idx_rider_rating'),
        ),
        migrations.AddIndex(
            model_name='userdocument',
            index=models.Index(fields=['user'], name='idx_document_user'),
        ),
        migrations.AddIndex(
            model_name='userdocument',
            index=models.Index(fields=['status'], name='idx_document_status'),
        ),
        migrations.AddIndex(
            model_name='userdocument',
            index=models.Index(fields=['id_type'], name='idx_document_type'),
        ),
    ]
