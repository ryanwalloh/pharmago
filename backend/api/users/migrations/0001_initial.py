# Generated by Django 5.2.5 on 2025-08-17 14:17

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True)),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('pharmacy', 'Pharmacy'), ('rider', 'Rider'), ('admin', 'Admin')], default='customer', help_text='User role in the system', max_length=50)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('profile_picture', models.URLField(blank=True, help_text='Profile picture URL', max_length=255, null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user account has been verified')),
                ('date_verified', models.DateTimeField(blank=True, help_text='When the account was verified', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Customer first name', max_length=100)),
                ('last_name', models.CharField(help_text='Customer last name', max_length=100)),
                ('phone_number', models.CharField(help_text='Contact phone number', max_length=20, unique=True)),
                ('profile_picture', models.URLField(blank=True, help_text='Profile picture URL', max_length=255, null=True)),
                ('valid_id', models.URLField(blank=True, help_text='Government ID file path', max_length=255, null=True)),
                ('is_senior', models.BooleanField(default=False, help_text='Whether customer is a senior citizen')),
                ('date_of_birth', models.DateField(blank=True, help_text='Customer date of birth', null=True)),
                ('senior_citizen_id', models.CharField(blank=True, help_text='Senior citizen ID number', max_length=100, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact person name', max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=20, null=True)),
                ('preferred_delivery_time', models.CharField(blank=True, choices=[('morning', 'Morning (8AM-12PM)'), ('afternoon', 'Afternoon (12PM-5PM)'), ('evening', 'Evening (5PM-9PM)'), ('anytime', 'Anytime')], default='anytime', help_text='Preferred delivery time slot', max_length=50, null=True)),
                ('delivery_instructions', models.TextField(blank=True, help_text='Special delivery instructions', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account', on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customer',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='idx_user_role'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='idx_user_email'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='idx_user_username'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='idx_user_verified'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['user'], name='idx_customer_user'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['phone_number'], name='idx_customer_phone'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_senior'], name='idx_customer_senior'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['created_at'], name='idx_customer_created'),
        ),
    ]
