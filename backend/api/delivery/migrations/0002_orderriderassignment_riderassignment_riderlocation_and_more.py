# Generated by Django 5.2.5 on 2025-08-21 13:47

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('delivery', '0001_initial'),
        ('orders', '0002_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrderRiderAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_sequence', models.PositiveIntegerField(default=1, help_text='Sequence for pickup (1 = first, 2 = second, etc.)')),
                ('delivery_sequence', models.PositiveIntegerField(default=1, help_text='Sequence for delivery (1 = first, 2 = second, etc.)')),
                ('picked_up_at', models.DateTimeField(blank=True, help_text='When this specific order was picked up', null=True)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When this specific order was delivered', null=True)),
                ('delivery_notes', models.TextField(blank=True, help_text='Notes specific to this order delivery', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Order Rider Assignment',
                'verbose_name_plural': 'Order Rider Assignments',
                'db_table': 'order_rider_assignment',
                'ordering': ['assignment', 'pickup_sequence', 'delivery_sequence'],
            },
        ),
        migrations.CreateModel(
            name='RiderAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_id', models.CharField(help_text='Unique assignment identifier', max_length=50, unique=True)),
                ('assignment_type', models.CharField(choices=[('single', 'Single Order'), ('batch', 'Batched Orders')], default='single', help_text='Type of assignment (single or batch)', max_length=20)),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('accepted', 'Accepted by Rider'), ('picked_up', 'Orders Picked Up'), ('delivering', 'Out for Delivery'), ('completed', 'All Orders Delivered'), ('cancelled', 'Assignment Cancelled'), ('reassigned', 'Reassigned to Another Rider')], default='assigned', help_text='Current assignment status', max_length=20)),
                ('batch_size', models.PositiveIntegerField(default=1, help_text='Number of orders in this assignment', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('max_batch_size', models.PositiveIntegerField(default=3, help_text='Maximum batch size allowed for this assignment')),
                ('pickup_latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Pickup location latitude', max_digits=10, null=True)),
                ('pickup_longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Pickup location longitude', max_digits=11, null=True)),
                ('total_delivery_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Total delivery fee for all orders', max_digits=8)),
                ('rider_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Rider earnings for this assignment', max_digits=8)),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='When the assignment was created')),
                ('accepted_at', models.DateTimeField(blank=True, help_text='When the rider accepted the assignment', null=True)),
                ('picked_up_at', models.DateTimeField(blank=True, help_text='When all orders were picked up', null=True)),
                ('started_delivery_at', models.DateTimeField(blank=True, help_text='When delivery started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When all orders were delivered', null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, help_text='Estimated completion time', null=True)),
                ('notes', models.TextField(blank=True, help_text='Assignment notes and instructions', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes for this assignment', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rider Assignment',
                'verbose_name_plural': 'Rider Assignments',
                'db_table': 'rider_assignment',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RiderLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=8, help_text='Current latitude coordinate', max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(decimal_places=8, help_text='Current longitude coordinate', max_digits=11, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('accuracy', models.DecimalField(blank=True, decimal_places=2, help_text='GPS accuracy in meters', max_digits=5, null=True)),
                ('speed', models.DecimalField(blank=True, decimal_places=2, help_text='Current speed in km/h', max_digits=5, null=True)),
                ('heading', models.DecimalField(blank=True, decimal_places=2, help_text='Direction of travel in degrees (0-360)', max_digits=5, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this location was recorded')),
            ],
            options={
                'verbose_name': 'Rider Location',
                'verbose_name_plural': 'Rider Locations',
                'db_table': 'rider_location',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='deliveryzone',
            name='max_batch_distance_km',
            field=models.DecimalField(decimal_places=2, default=2.0, help_text='Maximum distance between orders in a batch (km)', max_digits=5),
        ),
        migrations.AddField(
            model_name='deliveryzone',
            name='max_batch_size',
            field=models.PositiveIntegerField(default=3, help_text='Maximum number of orders that can be batched together', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AlterField(
            model_name='deliveryzone',
            name='description',
            field=models.TextField(blank=True, help_text='Description of the delivery zone', null=True),
        ),
        migrations.AddIndex(
            model_name='deliveryzone',
            index=models.Index(fields=['is_active'], name='idx_zone_active'),
        ),
        migrations.AddIndex(
            model_name='deliveryzone',
            index=models.Index(fields=['center_latitude', 'center_longitude'], name='idx_zone_center'),
        ),
        migrations.AlterModelTable(
            name='deliveryzone',
            table='delivery_zone',
        ),
        migrations.AddField(
            model_name='orderriderassignment',
            name='order',
            field=models.ForeignKey(help_text='Order being delivered', on_delete=django.db.models.deletion.CASCADE, related_name='rider_assignments', to='orders.order'),
        ),
        migrations.AddField(
            model_name='riderassignment',
            name='rider',
            field=models.ForeignKey(help_text='Rider assigned to these orders', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='users.rider'),
        ),
        migrations.AddField(
            model_name='orderriderassignment',
            name='assignment',
            field=models.ForeignKey(help_text='Rider assignment for this order', on_delete=django.db.models.deletion.CASCADE, related_name='order_assignments', to='delivery.riderassignment'),
        ),
        migrations.AddField(
            model_name='riderlocation',
            name='assignment',
            field=models.ForeignKey(blank=True, help_text='Current assignment (if any)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location_updates', to='delivery.riderassignment'),
        ),
        migrations.AddField(
            model_name='riderlocation',
            name='rider',
            field=models.ForeignKey(help_text='Rider whose location is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='location_updates', to='users.rider'),
        ),
        migrations.AddIndex(
            model_name='riderassignment',
            index=models.Index(fields=['rider'], name='idx_assignment_rider'),
        ),
        migrations.AddIndex(
            model_name='riderassignment',
            index=models.Index(fields=['status'], name='idx_assignment_status'),
        ),
        migrations.AddIndex(
            model_name='riderassignment',
            index=models.Index(fields=['assignment_type'], name='idx_assignment_type'),
        ),
        migrations.AddIndex(
            model_name='riderassignment',
            index=models.Index(fields=['assigned_at'], name='idx_assignment_assigned'),
        ),
        migrations.AddIndex(
            model_name='riderassignment',
            index=models.Index(fields=['batch_size'], name='idx_assignment_batch_size'),
        ),
        migrations.AddConstraint(
            model_name='riderassignment',
            constraint=models.CheckConstraint(condition=models.Q(('batch_size__gte', 1), ('batch_size__lte', 5)), name='valid_batch_size'),
        ),
        migrations.AddConstraint(
            model_name='riderassignment',
            constraint=models.CheckConstraint(condition=models.Q(('total_delivery_fee__gte', 0)), name='valid_delivery_fee'),
        ),
        migrations.AddIndex(
            model_name='orderriderassignment',
            index=models.Index(fields=['order'], name='idx_order_rider_order'),
        ),
        migrations.AddIndex(
            model_name='orderriderassignment',
            index=models.Index(fields=['assignment'], name='idx_order_rider_assignment'),
        ),
        migrations.AddIndex(
            model_name='orderriderassignment',
            index=models.Index(fields=['pickup_sequence'], name='idx_order_pickup_seq'),
        ),
        migrations.AddIndex(
            model_name='orderriderassignment',
            index=models.Index(fields=['delivery_sequence'], name='idx_order_delivery_seq'),
        ),
        migrations.AlterUniqueTogether(
            name='orderriderassignment',
            unique_together={('assignment', 'delivery_sequence'), ('assignment', 'pickup_sequence'), ('order', 'assignment')},
        ),
        migrations.AddIndex(
            model_name='riderlocation',
            index=models.Index(fields=['rider'], name='idx_location_rider'),
        ),
        migrations.AddIndex(
            model_name='riderlocation',
            index=models.Index(fields=['assignment'], name='idx_location_assignment'),
        ),
        migrations.AddIndex(
            model_name='riderlocation',
            index=models.Index(fields=['timestamp'], name='idx_location_timestamp'),
        ),
        migrations.AddIndex(
            model_name='riderlocation',
            index=models.Index(fields=['latitude', 'longitude'], name='idx_location_coordinates'),
        ),
        migrations.AddConstraint(
            model_name='riderlocation',
            constraint=models.CheckConstraint(condition=models.Q(('latitude__gte', -90), ('latitude__lte', 90)), name='valid_location_latitude'),
        ),
        migrations.AddConstraint(
            model_name='riderlocation',
            constraint=models.CheckConstraint(condition=models.Q(('longitude__gte', -180), ('longitude__lte', 180)), name='valid_location_longitude'),
        ),
    ]
